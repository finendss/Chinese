local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/CNHM/asg/refs/heads/main/wind%20ui.lua"))()

local HttpService = game:GetService("HttpService")

local TARGET_LANGUAGE = "zh-CN"
local translatedCache = {}

-- 检查是否为英文文本
local function isEnglishText(text)
    if not text or type(text) ~= "string" then return false end
    if not text:match("[A-Za-z]") then
        return false
    end
    if text:match("[\228-\233][\128-\191][\128-\191]") then
        return false
    end
    return true
end

-- 检查是否需要跳过翻译
local function shouldSkipTranslation(text)
    if not text or text == "" or translatedCache[text] then
        return true
    end
    if text:match("^%s*$") or text:match("^[0-9%.%s,:/%%%-%=%+%*%(%)%[%]%{%}]+$") then
        translatedCache[text] = text
        return true
    end
    if #text > 500 then
        translatedCache[text] = text
        return true
    end
    if not isEnglishText(text) then
        translatedCache[text] = text
        return true
    end
    if text:match("^[a-zA-Z_][a-zA-Z0-9_]*$") and #text < 30 then
        translatedCache[text] = text
        return true
    end
    return false
end

-- 翻译函数
local function translate(text)
    if shouldSkipTranslation(text) then
        return translatedCache[text] or text
    end

    local success, response = pcall(function()
        local url = "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=" .. 
                    TARGET_LANGUAGE .. "&dt=t&q=" .. HttpService:UrlEncode(text)
        return game:HttpGet(url)
    end)

    if success and response then
        local ok, data = pcall(HttpService.JSONDecode, HttpService, response)
        if ok and data and data[1] then
            local translatedText = ""
            for _, segment in ipairs(data[1]) do
                if segment[1] then
                    translatedText = translatedText .. segment[1]
                end
            end
            if translatedText ~= "" and translatedText ~= text then
                translatedCache[text] = translatedText
                print("翻译成功: \"" .. text .. "\" -> \"" .. translatedText .. "\"")
                return translatedText
            end
        end
    end

    translatedCache[text] = text
    return text
end

-- 提取脚本中的英文文本
local function extractEnglishText(scriptCode)
    local texts = {}
    
    -- 匹配双引号字符串
    for match in scriptCode:gsub('\\"', '##ESCAPED_QUOTE##'):gmatch('"(.-)"') do
        local text = match:gsub('##ESCAPED_QUOTE##', '\\"')
        if isEnglishText(text) and not shouldSkipTranslation(text) then
            table.insert(texts, text)
        end
    end
    
    -- 匹配单引号字符串
    for match in scriptCode:gsub("\\'", "##ESCAPED_QUOTE##"):gmatch("'(.-)'") do
        local text = match:gsub("##ESCAPED_QUOTE##", "\\'")
        if isEnglishText(text) and not shouldSkipTranslation(text) then
            table.insert(texts, text)
        end
    end
    
    -- 匹配多行注释
    for match in scriptCode:gmatch("%-%-%[%[(.-)%]%]") do
        if isEnglishText(match) and not shouldSkipTranslation(match) then
            table.insert(texts, match)
        end
    end
    
    -- 匹配单行注释
    for match in scriptCode:gmatch("%-%-%s*(.-)\n") do
        if isEnglishText(match) and not shouldSkipTranslation(match) then
            table.insert(texts, match)
        end
    end
    
    return texts
end

-- 翻译脚本内容
local function translateScript(scriptCode)
    local translatedCode = scriptCode
    
    -- 提取所有需要翻译的文本
    local textsToTranslate = extractEnglishText(scriptCode)
    
    -- 翻译每个文本并替换
    for _, text in ipairs(textsToTranslate) do
        local translatedText = translate(text)
        if translatedText ~= text then
            local escapedText = text:gsub("([%(%)%.%%%+%-%*%?%[%]%^%$])", "%%%1")
            translatedCode = translatedCode:gsub(escapedText, translatedText)
        end
    end
    
    return translatedCode
end

-- 加载并翻译外部脚本
local function loadTranslatedScript(url)
    local success, scriptContent = pcall(function()
        return game:HttpGet(url)
    end)
    
    if success then
        local translatedScript = translateScript(scriptContent)
        local textCount = #extractEnglishText(scriptContent)
        
        -- 执行翻译后的脚本
        local success, err = pcall(function()
            loadstring(translatedScript)()
        end)
        
        if success then
            print("脚本翻译并执行成功！翻译了 " .. textCount .. " 个文本")
        else
            print("脚本执行失败: " .. tostring(err))
        end
    else
        print("无法加载脚本: " .. url)
    end
end

-- 创建窗口
local Window = WindUI:CreateWindow({
    Title = "XF脚本翻译器",
    IconThemed = true,
    Icon = "star",
    Author = "FIN Team",
    Size = UDim2.fromOffset(400, 300),
    Transparent = true,
    Theme = "Dark",
})

Window:EditOpenButton({
    Title = "打开翻译器",
    Icon = "monitor",
    CornerRadius = UDim.new(0, 6),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromRGB(30, 30, 30), Color3.fromRGB(255, 255, 255)),
    Draggable = true,
})

-- 脚本翻译标签页
local Tab = Window:Tab({
    Title = "脚本翻译",
    Icon = "file-code",
    Locked = false,
})

-- 自定义脚本输入
local Textbox = Tab:Textbox({
    Title = "脚本URL",
    Desc = "输入英文脚本的URL地址",
    Default = "",
    Callback = function(text)
        customScriptUrl = text
    end
})

local Button = Tab:Button({
    Title = "加载并翻译脚本",
    Desc = "从URL加载脚本并翻译为中文",
    Locked = false,
    Callback = function()
        if customScriptUrl and customScriptUrl ~= "" then
            loadTranslatedScript(customScriptUrl)
        else
            print("请输入有效的脚本URL")
        end
    end
})

print("XF脚本翻译器加载完成")
print("功能: 自动翻译英文脚本为中文")
